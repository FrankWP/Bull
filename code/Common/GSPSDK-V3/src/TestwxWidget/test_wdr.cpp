//------------------------------------------------------------------------------
// Source code generated by wxDesigner from file: test.wdr
// Do not modify this file, all changes will be lost!
//------------------------------------------------------------------------------

#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
    #pragma implementation "test_wdr.h"
#endif

// For compilers that support precompilation
#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

// Include private header
#include "test_wdr.h"


// Euro sign hack of the year
#if wxUSE_UNICODE
    #define __WDR_EURO__ wxT("\u20ac")
#else
    #if defined(__WXMAC__)
        #define __WDR_EURO__ wxT("\xdb")
    #elif defined(__WXMSW__)
        #define __WDR_EURO__ wxT("\x80")
    #else
        #define __WDR_EURO__ wxT("\xa4")
    #endif
#endif

// Custom source
#include "test_wdr.h"

// Implement window functions

wxSizer *MainFrameDialog( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxTextCtrl *item2 = new wxTextCtrl( parent, ID_TEXTCTRL_OUPUT, wxT(""), wxDefaultPosition, wxSize(800,600), wxTE_MULTILINE|wxTE_READONLY|wxVSCROLL|wxHSCROLL );
    item1->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *CreateTestServerDialog( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT_SRV_CONFIG, wxT("Config File:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item3 = new wxTextCtrl( parent, ID_TEXTCTRL_CFGFILE, wxT(""), wxDefaultPosition, wxSize(370,-1), 0 );
    item1->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item4 = new wxButton( parent, ID_BUTTON_SELCFGFILE, wxT("..."), wxDefaultPosition, wxSize(20,20), 0 );
    item4->SetFont( wxFont( 12, wxROMAN, wxNORMAL, wxBOLD ) );
    item1->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticLine *item5 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(-1,20), wxLI_VERTICAL );
    item1->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxToggleButton *item6 = new wxToggleButton( parent, ID_TOGGLEBUTTON_SSSERVER, wxT("Start Server"), wxDefaultPosition, wxSize(100,40), 0 );
    item6->SetForegroundColour( *wxRED );
    item6->SetFont( wxFont( 12, wxROMAN, wxNORMAL, wxBOLD ) );
    item1->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    wxGrid *item7 = new wxGrid( parent, ID_GRID_SRV_ST, wxDefaultPosition, wxSize(290,100), wxWANTS_CHARS );
    item7->CreateGrid( 0, 0, wxGrid::wxGridSelectCells );
    item7->SetToolTip( wxT("Server list") );
    item1->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 230 );

    wxStaticLine *item8 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(800,-1), wxLI_HORIZONTAL );
    item0->Add( item8, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item9 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticBox *item11 = new wxStaticBox( parent, -1, wxT("Source Info") );
    wxStaticBoxSizer *item10 = new wxStaticBoxSizer( item11, wxHORIZONTAL );

    wxGrid *item12 = new wxGrid( parent, ID_GRID_SRC, wxDefaultPosition, wxSize(690,300), wxWANTS_CHARS );
    item12->CreateGrid( 0, 0, wxGrid::wxGridSelectRows );
    item10->Add( item12, 0, wxALIGN_CENTER|wxALL, 5 );

    item10->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticBox *item14 = new wxStaticBox( parent, -1, wxT("") );
    wxStaticBoxSizer *item13 = new wxStaticBoxSizer( item14, wxVERTICAL );

    wxButton *item15 = new wxButton( parent, ID_BUTTON_DEL_SRC, wxT("Delete"), wxDefaultPosition, wxDefaultSize, 0 );
    item15->SetFont( wxFont( 12, wxROMAN, wxNORMAL, wxBOLD ) );
    item15->Enable( false );
    item13->Add( item15, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxToggleButton *item16 = new wxToggleButton( parent, ID_TOGGLEBUTTON_SRC_SENDDATA, wxT("Send Data"), wxDefaultPosition, wxDefaultSize, 0 );
    item16->SetFont( wxFont( 12, wxROMAN, wxNORMAL, wxBOLD ) );
    item16->Enable( false );
    item13->Add( item16, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item17 = new wxStaticText( parent, ID_TEXT, wxT("Send Interval (MSecond)"), wxDefaultPosition, wxDefaultSize, 0 );
    item13->Add( item17, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxSpinCtrl *item18 = new wxSpinCtrl( parent, ID_SPINCTRL_SINTERVAL, wxT("5"), wxDefaultPosition, wxSize(100,-1), 0, 1, 10000, 5 );
    item13->Add( item18, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item19 = new wxBoxSizer( wxVERTICAL );

    wxStaticLine *item20 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(20,-1), wxLI_HORIZONTAL );
    item19->Add( item20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item21 = new wxStaticText( parent, ID_TEXT, wxT("Refresh Interval (Second)"), wxDefaultPosition, wxDefaultSize, 0 );
    item19->Add( item21, 0, wxALIGN_CENTER|wxALL, 5 );

    wxSpinCtrl *item22 = new wxSpinCtrl( parent, ID_SPINCTRL_SRC_REFINTERVAL, wxT("3"), wxDefaultPosition, wxSize(100,-1), 0, 1, 3600, 3 );
    item19->Add( item22, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item23 = new wxCheckBox( parent, ID_CHECKBOX_SRC_REFRESH, wxT("Refresh"), wxDefaultPosition, wxDefaultSize, 0 );
    item23->SetValue( TRUE );
    item19->Add( item23, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item13->Add( item19, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    item10->Add( item13, 0, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    item9->Add( item10, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    item0->Add( item9, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticLine *item24 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(600,-1), wxLI_HORIZONTAL );
    item0->Add( item24, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item26 = new wxStaticBox( parent, -1, wxT("Source Ctrl") );
    wxStaticBoxSizer *item25 = new wxStaticBoxSizer( item26, wxHORIZONTAL );

    wxStaticText *item27 = new wxStaticText( parent, ID_TEXT, wxT("StartIndex:"), wxDefaultPosition, wxDefaultSize, 0 );
    item25->Add( item27, 0, wxALIGN_CENTER|wxALL, 5 );

    wxSpinCtrl *item28 = new wxSpinCtrl( parent, ID_SPINCTRL_SRCIDX_START, wxT("0"), wxDefaultPosition, wxSize(100,-1), 0, 0, 3000, 0 );
    item25->Add( item28, 0, wxALIGN_CENTER|wxALL, 5 );

    item25->Add( 10, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item29 = new wxStaticText( parent, ID_TEXT, wxT("Numbers :"), wxDefaultPosition, wxDefaultSize, 0 );
    item25->Add( item29, 0, wxALIGN_CENTER|wxALL, 5 );

    wxSpinCtrl *item30 = new wxSpinCtrl( parent, ID_SPINCTRL_SRCID_END, wxT("10"), wxDefaultPosition, wxSize(100,-1), 0, 1, 3000, 10 );
    item25->Add( item30, 0, wxALIGN_CENTER|wxALL, 5 );

    item25->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item31 = new wxButton( parent, ID_BUTTON_ADD_SINGLE, wxT("Add Single"), wxDefaultPosition, wxDefaultSize, 0 );
    item31->SetFont( wxFont( 12, wxROMAN, wxNORMAL, wxBOLD ) );
    item31->Enable( false );
    item25->Add( item31, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item32 = new wxButton( parent, ID_BUTTON_ADD_LOTS, wxT("Add Lots"), wxDefaultPosition, wxDefaultSize, 0 );
    item32->SetFont( wxFont( 12, wxROMAN, wxNORMAL, wxBOLD ) );
    item32->Enable( false );
    item25->Add( item32, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticLine *item33 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(-1,30), wxLI_VERTICAL );
    item25->Add( item33, 0, wxALIGN_CENTER|wxALL, 5 );

    wxToggleButton *item34 = new wxToggleButton( parent, ID_TOGGLEBUTTON_AD_RAND, wxT("Add/Del Rand"), wxDefaultPosition, wxDefaultSize, 0 );
    item34->SetForegroundColour( *wxRED );
    item34->SetFont( wxFont( 12, wxROMAN, wxNORMAL, wxBOLD ) );
    item34->Enable( false );
    item25->Add( item34, 0, wxALIGN_CENTER|wxALL, 5 );

    wxSpinCtrl *item35 = new wxSpinCtrl( parent, ID_SPINCTRL_AD_INTERVAL, wxT("10"), wxDefaultPosition, wxSize(50,-1), 0, 1, 10000, 10 );
    item25->Add( item35, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item36 = new wxStaticText( parent, ID_TEXT, wxT("(MSeconds)"), wxDefaultPosition, wxDefaultSize, 0 );
    item25->Add( item36, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item25, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticLine *item37 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(20,-1), wxLI_HORIZONTAL );
    item0->Add( item37, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item39 = new wxStaticBox( parent, -1, wxT("Client Info") );
    wxStaticBoxSizer *item38 = new wxStaticBoxSizer( item39, wxHORIZONTAL );

    wxGrid *item40 = new wxGrid( parent, ID_GRID_CLIENT, wxDefaultPosition, wxSize(690,300), wxWANTS_CHARS );
    item40->CreateGrid( 0, 0, wxGrid::wxGridSelectRows );
    item38->Add( item40, 0, wxALIGN_CENTER|wxALL, 5 );

    item38->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticBox *item42 = new wxStaticBox( parent, -1, wxT("") );
    wxStaticBoxSizer *item41 = new wxStaticBoxSizer( item42, wxVERTICAL );

    wxStaticText *item43 = new wxStaticText( parent, ID_TEXT, wxT("Refresh Interval (Second)"), wxDefaultPosition, wxDefaultSize, 0 );
    item41->Add( item43, 0, wxALIGN_CENTER|wxALL, 5 );

    wxSpinCtrl *item44 = new wxSpinCtrl( parent, ID_SPINCTRL_CLI_REFINTERVAL, wxT("3"), wxDefaultPosition, wxSize(100,-1), 0, 1, 3600, 3 );
    item41->Add( item44, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item45 = new wxCheckBox( parent, ID_CHECKBOX_CLI_REFRESH, wxT("Refresh"), wxDefaultPosition, wxDefaultSize, 0 );
    item45->SetValue( TRUE );
    item41->Add( item45, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item38->Add( item41, 0, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    item0->Add( item38, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *CreateTestClientDialog( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxVERTICAL );

    wxStaticLine *item2 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(20,-1), wxLI_HORIZONTAL );
    item1->Add( item2, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item3 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item4 = new wxStaticText( parent, ID_TEXT_SRV_CONFIG, wxT("Config File:"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item5 = new wxTextCtrl( parent, ID_TEXTCTRL_CFGFILE, wxT(""), wxDefaultPosition, wxSize(370,-1), 0 );
    item3->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item6 = new wxButton( parent, ID_BUTTON_SELCFGFILE, wxT("..."), wxDefaultPosition, wxSize(20,20), 0 );
    item6->SetFont( wxFont( 12, wxROMAN, wxNORMAL, wxBOLD ) );
    item3->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticLine *item7 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(-1,20), wxLI_VERTICAL );
    item3->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    item3->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxToggleButton *item8 = new wxToggleButton( parent, ID_TOGGLEBUTTON_START_SECTION, wxT("Start Section"), wxDefaultPosition, wxSize(100,40), 0 );
    item8->SetForegroundColour( *wxRED );
    item8->SetFont( wxFont( 12, wxROMAN, wxNORMAL, wxBOLD ) );
    item3->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );

    wxGrid *item9 = new wxGrid( parent, ID_GRID_PRO_MODULE, wxDefaultPosition, wxSize(290,100), wxWANTS_CHARS );
    item9->CreateGrid( 0, 0, wxGrid::wxGridSelectCells );
    item9->SetToolTip( wxT("Server list") );
    item3->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item3, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 230 );

    wxStaticLine *item10 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(800,-1), wxLI_HORIZONTAL );
    item1->Add( item10, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item11 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticBox *item13 = new wxStaticBox( parent, -1, wxT("Channel Info") );
    wxStaticBoxSizer *item12 = new wxStaticBoxSizer( item13, wxHORIZONTAL );

    wxGrid *item14 = new wxGrid( parent, ID_GRID_CHANNEL, wxDefaultPosition, wxSize(690,550), wxWANTS_CHARS );
    item14->CreateGrid( 0, 0, wxGrid::wxGridSelectRows );
    item12->Add( item14, 0, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    item12->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticBox *item16 = new wxStaticBox( parent, -1, wxT("") );
    wxStaticBoxSizer *item15 = new wxStaticBoxSizer( item16, wxVERTICAL );

    wxStaticBox *item18 = new wxStaticBox( parent, -1, wxT("") );
    wxStaticBoxSizer *item17 = new wxStaticBoxSizer( item18, wxVERTICAL );

    wxStaticLine *item19 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(20,-1), wxLI_HORIZONTAL );
    item17->Add( item19, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item20 = new wxStaticText( parent, ID_TEXT, wxT("Refresh Interval (Second)"), wxDefaultPosition, wxDefaultSize, 0 );
    item17->Add( item20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxSpinCtrl *item21 = new wxSpinCtrl( parent, ID_SPINCTRL_CHN_REFINTERVAL, wxT("3"), wxDefaultPosition, wxSize(100,-1), 0, 1, 3600, 3 );
    item17->Add( item21, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item22 = new wxCheckBox( parent, ID_CHECKBOX_CHN_REFRESH, wxT("Refresh"), wxDefaultPosition, wxDefaultSize, 0 );
    item22->SetValue( TRUE );
    item17->Add( item22, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item15->Add( item17, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    wxStaticLine *item23 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(20,-1), wxLI_HORIZONTAL );
    item15->Add( item23, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxFlexGridSizer *item24 = new wxFlexGridSizer( 2, 0, 0 );

    wxStaticText *item25 = new wxStaticText( parent, ID_TEXT, wxT("Pro:"), wxDefaultPosition, wxDefaultSize, 0 );
    item24->Add( item25, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxString strs26[] = 
    {
        wxT("gsp"), 
        wxT("rtsp")
    };
    wxChoice *item26 = new wxChoice( parent, ID_CHOICE_PRO, wxDefaultPosition, wxSize(100,-1), 2, strs26, 0 );
    item24->Add( item26, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item27 = new wxStaticText( parent, ID_TEXT, wxT("IP:"), wxDefaultPosition, wxDefaultSize, 0 );
    item24->Add( item27, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item28 = new wxTextCtrl( parent, ID_TEXTCTRL_IP, wxT("localhost"), wxDefaultPosition, wxSize(110,-1), 0 );
    item24->Add( item28, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item29 = new wxStaticText( parent, ID_TEXT, wxT("Port:"), wxDefaultPosition, wxDefaultSize, 0 );
    item24->Add( item29, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item30 = new wxTextCtrl( parent, ID_TEXTCTRL_PORT, wxT("12345"), wxDefaultPosition, wxSize(80,-1), 0 );
    item24->Add( item30, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item31 = new wxStaticText( parent, ID_TEXT, wxT("StartIndex:"), wxDefaultPosition, wxDefaultSize, 0 );
    item24->Add( item31, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxSpinCtrl *item32 = new wxSpinCtrl( parent, ID_SPINCTRL_KEYIDX_START, wxT("0"), wxDefaultPosition, wxSize(100,-1), 0, 0, 3000, 0 );
    item24->Add( item32, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item33 = new wxStaticText( parent, ID_TEXT, wxT("Numbers:"), wxDefaultPosition, wxDefaultSize, 0 );
    item24->Add( item33, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxSpinCtrl *item34 = new wxSpinCtrl( parent, ID_SPINCTRL_KEY_NUMBER, wxT("10"), wxDefaultPosition, wxSize(100,-1), 0, 1, 3000, 10 );
    item24->Add( item34, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item35 = new wxStaticText( parent, ID_TEXT, wxT("TransMode:"), wxDefaultPosition, wxDefaultSize, 0 );
    item24->Add( item35, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxString strs36[] = 
    {
        wxT("Realtime"), 
        wxT("Playback"), 
        wxT("Download")
    };
    wxChoice *item36 = new wxChoice( parent, ID_CHOICE_TRANSMODULE, wxDefaultPosition, wxSize(100,-1), 3, strs36, 0 );
    item24->Add( item36, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item37 = new wxButton( parent, ID_BTN_CLOSE, wxT("Close"), wxDefaultPosition, wxDefaultSize, 0 );
    item24->Add( item37, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item38 = new wxButton( parent, ID_BUTTON_ADD_SINGLE, wxT("Add Single"), wxDefaultPosition, wxDefaultSize, 0 );
    item38->SetFont( wxFont( 12, wxROMAN, wxNORMAL, wxBOLD ) );
    item38->Enable( false );
    item24->Add( item38, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item39 = new wxButton( parent, ID_BTN_DEL, wxT("Del"), wxDefaultPosition, wxDefaultSize, 0 );
    item24->Add( item39, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item40 = new wxButton( parent, ID_BUTTON_ADD_LOTS, wxT("Add Lots"), wxDefaultPosition, wxDefaultSize, 0 );
    item40->SetFont( wxFont( 12, wxROMAN, wxNORMAL, wxBOLD ) );
    item40->Enable( false );
    item24->Add( item40, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item15->Add( item24, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item42 = new wxStaticBox( parent, -1, wxT("") );
    wxStaticBoxSizer *item41 = new wxStaticBoxSizer( item42, wxVERTICAL );

    wxToggleButton *item43 = new wxToggleButton( parent, ID_TOGGLEBUTTON_AD_RAND, wxT("Add/Del Rand "), wxDefaultPosition, wxDefaultSize, 0 );
    item43->SetForegroundColour( *wxRED );
    item43->SetFont( wxFont( 12, wxROMAN, wxNORMAL, wxBOLD ) );
    item43->Enable( false );
    item41->Add( item43, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxToggleButton *item44 = new wxToggleButton( parent, ID_TBLBTN_OCRAND, wxT("Open/Close Rand"), wxDefaultPosition, wxDefaultSize, 0 );
    item44->SetFont( wxFont( 12, wxROMAN, wxNORMAL, wxBOLD ) );
    item41->Add( item44, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item45 = new wxBoxSizer( wxHORIZONTAL );

    wxSpinCtrl *item46 = new wxSpinCtrl( parent, ID_SPINCTRL_AD_INTERVAL, wxT("100"), wxDefaultPosition, wxSize(100,-1), 0, 1, 10000, 100 );
    item45->Add( item46, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item47 = new wxStaticText( parent, ID_TEXT, wxT("(MSecond)"), wxDefaultPosition, wxDefaultSize, 0 );
    item45->Add( item47, 0, wxALIGN_CENTER|wxALL, 5 );

    item41->Add( item45, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item15->Add( item41, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item12->Add( item15, 0, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    item11->Add( item12, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    item1->Add( item11, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticLine *item48 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(600,-1), wxLI_HORIZONTAL );
    item1->Add( item48, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item50 = new wxStaticBox( parent, -1, wxT("PlayCtrl") );
    wxStaticBoxSizer *item49 = new wxStaticBoxSizer( item50, wxHORIZONTAL );

    wxToggleButton *item51 = new wxToggleButton( parent, ID_TGLBTN_PLAY, wxT("Play"), wxDefaultPosition, wxDefaultSize, 0 );
    item49->Add( item51, 0, wxALIGN_CENTER|wxALL, 5 );

    wxToggleButton *item52 = new wxToggleButton( parent, ID_TGLBTN_PAUSE, wxT("PAUSE"), wxDefaultPosition, wxDefaultSize, 0 );
    item49->Add( item52, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item53 = new wxButton( parent, ID_BTN_FAST, wxT("Fast>>"), wxDefaultPosition, wxDefaultSize, 0 );
    item49->Add( item53, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item54 = new wxButton( parent, ID_BTN_SLOW, wxT("Slow>>"), wxDefaultPosition, wxDefaultSize, 0 );
    item49->Add( item54, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item55 = new wxButton( parent, ID_BTN_STEP, wxT("STEP>>"), wxDefaultPosition, wxDefaultSize, 0 );
    item49->Add( item55, 0, wxALIGN_CENTER|wxALL, 5 );

    wxSlider *item56 = new wxSlider( parent, ID_SLIDER_SETPOINT, 0, 0, 100, wxDefaultPosition, wxSize(100,-1), wxSL_HORIZONTAL|wxSL_LABELS );
    item49->Add( item56, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item57 = new wxButton( parent, ID_BTN_OPEN, wxT("Open"), wxDefaultPosition, wxDefaultSize, 0 );
    item49->Add( item57, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item49, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item1, 0, wxGROW|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

// Implement menubar functions

wxMenuBar *MyMenuBarFunc()
{
    wxMenuBar *item0 = new wxMenuBar;
    
    wxMenu* item1 = new wxMenu;
    item1->Append( ID_MENU_SERVER, wxT("Server"), wxT("") );
    item1->Append( ID_MENU_TEST, wxT("Client"), wxT("") );
    item1->Append( ID_MENU_ASSERT, wxT("Assert"), wxT("") );
    item0->Append( item1, wxT("Start Test") );
    
    return item0;
}

// Implement toolbar functions

// Implement bitmap functions


// End of generated file
